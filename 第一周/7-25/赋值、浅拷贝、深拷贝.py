"""
座右铭:将来的你一定会感激现在拼命的自己
@project:正课
@author:Mr.Chen
@file:赋值、浅拷贝、深拷贝.PY
@ide:PyCharm
@time:2018-07-25 14:05:30
"""
# 赋值:赋值属于浅拷贝的一种，当创建一个对象并且把它赋值给另一个变量的时候，实际上并没有拷贝这个对象，而是拷贝给了这个对象的引用，原对象和被赋值的变量它们的值是相等的，内存地址也相等。

# 比如有张三这个人，给他起了一个别名叫二狗子，张三和二狗子这个名字都指代的是张三这个人，那么如果给张三换了身衣服，那么二狗子也会跟着换衣服。


# list1=[1,2,3,4,[5,6]]
# new_list1 = list1
# print('原列表',list1)
# print('原列表的地址',id(list1))
# print('赋值的列表',new_list1)
# print('赋值的列表的内存地址',id(new_list1))
#
# list1[-1] = [7,8]
# print('修改之后的原列表变为：',list1)
# print('修改之后的原列表内存地址为',id(list1))
# print('赋值的列表',new_list1)
# print('赋值的列表的内存地址：',id(new_list1))

import copy
# 浅拷贝
list2 = [11, 12, 13, [14, 15]]
new_list2 = copy.copy(list2)
print('原列表',list2)
print('原列表的内存地址',id(list2))
print('浅拷贝之后的列表',new_list2)
print('浅拷贝之后的列表的内存地址',id(new_list2))


# 浅拷贝：仅拷贝对象本身，而不拷贝对象中引用的其他元素，原对象和拷贝出来的对象值相等，内存地址不相等。
# 有一个人叫list2,她有一个双胞胎的妹妹叫new_list2,这俩人不是同一个人，两个人穿的衣服（第一层对象）也一模一样，当list1换了衣服的时候，new_list2不换衣服。list2和new_list2性格上都喜欢高富帅（第二对象），list2喜欢吃肉，new_list2也可以喜欢吃肉。

# 生成一个新的地址内存，浅拷贝第一层元素没有关系，第二层元素有关系（一个变另一个也变）
print('--------------修改第一次元素-----------------')
list2[0] = 9
print('修改第一层之后的原列表',list2)
print('修改第一层之后的原列表的内存地址',id(list2))
print('浅拷贝的列表：',new_list2)
print('浅拷贝之后的内存地址：',id(new_list2))

print('-------------------修改第二次元素----------')
list2[-1].pop()
print('修改完第二层元素之后的原列表：',list2)
print('修改完第二层之后的原列表的内存地址',id(list2))
print('浅拷贝的列表：',new_list2)
print('浅拷贝之后的内存地址：',id(new_list2))


# 深拷贝：除了拷贝对象本身，并且会拷贝对象中引用的其他对象，值相等，内存地址不相等。
# 有一个人list3，克隆出了一个new_list3,长相一样（值相等），但是其他各个方面都不一样，是完全不相同的两个人。

# 深拷贝：生成一个新的地址内存，第一层，第二层都没有关系（原列表改变，第一层、第二层深拷贝之后的地址都不变）
# list3 = [17, 18, 19, 20, [21, 22]]
# new_list3 = copy.deepcopy(list3)
# print('原列表',list3)
# print('原列表的内存地址：',id(list3))
# print('深拷贝的列表：',new_list3)
# print('深拷贝的列表的内存地址：',id(new_list3))
#
# print('*****************修改第一层元素*****************')
# list3[0] = 23
# print('修改完第一层元素之后的原列表',list3)
# print('修改完第一层元素之后原列表的内存地址：',id(list3))
# print('深拷贝的列表：',new_list3)
# print('深拷贝的列表的内存地址：',id(new_list3))
#
# print('###########修改第二层元素################')
# list3[-1].pop()
# print('修改完第二层元素之后的原列表',list3)
# print('修改完第二层元素之后原列表的内存地址：',id(list3))
# print('深拷贝的列表：',new_list3)
# print('深拷贝的列表的内存地址：',id(new_list3))





