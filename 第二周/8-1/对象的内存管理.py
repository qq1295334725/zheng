"""
座右铭:将来的你一定会感激现在拼命的自己
@project:正课
@author:Mr.Chen
@file:对象的内存管理.PY
@ide:PyCharm
@time:2018-08-01 14:18:29
"""
# 内存：操作系统的运行内存。运行内存一般是用于启动一些程序，开启一些进程和线程供程序调动使用。
# 计算机编程语言管理内存有两种方式：
# 1.自动管理内存，比如python
# 2.手动管理内存。比如C

# python中的内存管理采用的是“引用计数”的方式，对一个对象的生命周期进行管理，如果一个的引用计数为0，则该对象被解释器进行内存的回收，对象也会在内存中随之消失，如果一个对象的引用计数不为0，则该对象会一直存放在内存中。

# 手动管理内存：指的是程序员来负责对象的内存释放。
# 优点：对象的引用计数管理更加精准，不容易产生内存泄漏的现象。（内存泄漏：就是对象没有被释放，依然在内存中存在。）
# 缺点：消耗大量时间，开发效率低。

# 自动管理内存：
# 优点：开发效率更高，不用自己手动负责对象内存的释放。
# 缺点：可能会出现对象在内存中释放不掉的情况，出现内存泄漏。

# 内存的分区：
# 1.栈区：栈区一般用于保存一些局部变量和指针等，这个区的内存由操作系统在程序运行结束的时候负责回收的。

# 2.堆区：创建的对象（list/tuple/dict/object）存储在堆区中，程序员主要管理的区就是堆区的内存。

# 3.全局区或者静态区：用于存放一些全局变量，全局变量占用的内存需要等待整个程序运行结束时，才能被回收，也是由操作系统进行回收，不受到引用计数的限制

# 4.常量区：用于存放一些字符串，整数，小数等常量，而常量所占用的内存是可以共享的，目的是为了节省内存空间，不受引用计数的限制，也是由操作系统统一回收常量区的内存。

# 5.代码编译区：用于存放经过解释器编译过后的二进制代码文件，也是由操作系统运行结束后统一回收常量区的内存。

# 对象引用计数的变化：
# 1.当对象被创建的时候，引用计数+1
# 2.当对象被其他指针引用的时候，引用计数+1
# 3.当对象被删除的时候，引用计数-1
# 4.当程序引用结束的时候，引用计数为0
import time
class People(object):

    number = 0
    def __init__(self):
        print('People对象被创建了')
        People.number+=1
        print('引用计数是：',People.number)

    def __del__(self):
        print('People生成的对象被删除了')
        People.number-=1
        print('引用计数是：',People.number)

p1 = People()

p2 = People()
time.sleep(5)
del p1
time.sleep(5)
del p2